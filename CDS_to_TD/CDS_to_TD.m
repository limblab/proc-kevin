% %% With the original nev
% [fn,pn] = uigetfile('*.nev');
% 
% tempfilename = split(fn,'.nev');
% tempfilename = tempfilename{1};
% signal_info = {
%     initSignalStruct('filename', [pn,filesep,fn],...
%         'routine', @processNEV,...
%         'params',struct(),...
%         'name',{'rightM1','SerialDigitalIO'},...
%         'type',{'spikes','event'},...
%         'label','');
% 
%     
%     initSignalStruct('filename',[pn,filesep,tempfilename,'.ns3'],...
%         'routine',@processNSx,...
%         'params',struct(),...
%         'name',{'EMG_FDSr','EMG_FDSu','EMG_FDPr','EMG_FDPu','EMG_FCR1','EMG_ECU1','EMG_ECU2','EMG_ECR1','EMG_ECR2','EMG_EPL','EMG_EDC2','EMG_FCU1'},...
%         'label',{'EMG_FDSr','EMG_FDSu','EMG_FDPr','EMG_FDPu','EMG_FCR1','EMG_ECU1','EMG_ECU2','EMG_ECR1','EMG_ECR2','EMG_EPL','EMG_EDC2','EMG_FCU1'},...
%     	'type','EMG');
% 
%     initSignalStruct('filename',[pn,filesep,tempfilename,'.ns2'],...
%         'routine',@processNSx,...
%         'params',struct(),...
%         'name','Force_AirDevice',...
%         'label','',...
%         'type','generic');
% 
% 
% 
% };

%% with CDS
% [fn,pn] = uigetfile('*_cds.mat');
clc
[fn,pn] = uigetfile({'*_cds.mat','CDS files (_cds.mat)'},...
   	'Pick the CDS files to convert','Multiselect','on'); % allows us to select multiple files



for ii = 1:numel(fn)
    sprintf('\n File %i of %i \n',ii,numel(fn))
    
    filename = [pn,filesep,fn{ii}];
    load(filename);
    tempfilename = strsplit(filename,'_cds.mat');
    tempfilename = tempfilename{1};



    params = struct('bin_size',.001);

    meta = cds.meta;
%     meta.date = datestr(meta.processedTime,'yyyymmdd');
    meta.td_taskname = meta.task;
    meta.EMGrecorded = false;

    if datenum(version('-date'))<datenum('Jan-01-2017')
        ttLabels = ~cell2mat(cellfun(@isempty,strfind(cds.trials.Properties.VariableNames,'time'),...
            'UniformOutput',false))
    else
        ttLabels = contains(cds.trials.Properties.VariableNames,'Time');
    end
    event_names = cds.trials.Properties.VariableNames(ttLabels);
    trial_meta = cds.trials.Properties.VariableNames(~ttLabels);

    
    signal_info = {
        initSignalStruct('filename', filename,...
            'routine', @processCDSspikes,...
            'params',struct(),...
            'name',meta.array,...
            'type','spikes',...
            'label','');


        initSignalStruct('filename',filename,...
            'routine',@processCDSevents,...
            'params',struct('trial_meta',{trial_meta}),...
            'name',event_names,...
            'label',event_names,...
            'type',repmat({'event'},1,length(event_names)));


    };


    if cds.meta.hasEmg
        signal_info{end+1} = initSignalStruct('filename',filename,...
            'routine',@processCDScontinuous,...
            'params',struct('trial_meta',{trial_meta}),...
            'name',cds.emg.Properties.VariableNames(2:end),...
            'label',cds.emg.Properties.VariableNames(2:end),...
            'type',repmat({'emg'},1,length(emg_signal_names)));
    end


    if strcmp(meta.task,'multi_gadget')
        signal_info{end+1} = ...
            initSignalStruct('filename',[tempfilename,'.ns2'],...
                'routine',@processNSx,...
                'params',struct(),...
                'name','Force_AirDevice',...
                'label','Force_AirDevice',...
                'type','generic');
    end


    [TD,td_params,flag] = convertDataToTD(signal_info);
    save([tempfilename,'_TD.mat'],'TD','-v7.3')

    disp(['saved ',tempfilename,'_TD.mat'])



end



disp('done and done')

